const { Events, ButtonStyle, ButtonBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } = require("discord.js");
const ini = require("../config/bot.json");

const fs = require("fs");
const path = require("path");

const readedRulesPath = path.resolve(__dirname, "../config/readedRules.json");

function extractNickname(text) {
    const match = text.match(/^([\w–∞-—è–ê-–Ø—ë–Å]+)(?:\s*[({\[][\w–∞-—è–ê-–Ø—ë–Å]+[)}\]])?$/);
    return match ? match[1] : null;
}

module.exports = {
    name: Events.MessageCreate,
    async execute(message) {
        if (message.author.bot) return;
        const guildConfig = ini.guilds[message.guild.id];
        if (message.content === "/zayav" && message.author.id === "701440080111337513") {
            const embedInfo = {
                color: 0xe74c3c,
                title: "**–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –≤ –≥–∏–ª—å–¥–∏—é –®–µ—Å—Ç–æ–π –î–æ–º**",
                description: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–ø—Ä–∏–±—ã–≤—à–∏—Ö, –µ—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏ **\"–®–µ—Å—Ç–æ–π –î–æ–º\"** - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.\n\n–û—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—à—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ, –º—ã –∂–µ –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\`\`\`‚Ä¢ –ü–æ–º–æ—â—å –≤ –ø—Ä–æ–∫–∞—á–∫–µ/–≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ –≥–µ–π–º–ø–ª–µ—é\n‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –≥–∏–ª—å–¥–µ–π—Å–∫–∏–µ —Ä–µ–π–¥—ã(–±–µ—Ä–µ–º –≤–∞–≥–æ–Ω—á–∏–∫–æ–≤)\n‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –≥–æ–ª–¥—É/–ø—Ä–µ–¥–º–µ—Ç—ã\`\`\`"
            }

            const buttons = new ActionRowBuilder().addComponents(
                new ButtonBuilder().setCustomId("requestGuild").setLabel("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É").setStyle(ButtonStyle.Danger).setEmoji({ name: "üìù" })
            )

            await message.channel.send({ 
                content: "", 
                embeds: [embedInfo],
                components: [buttons]
            });
        }

        if (message.content === "/rules" && message.author.id === "701440080111337513") {
            
            fs.readFile(readedRulesPath, 'utf8', async (err, data) => {
                const embedInfo = {
                    color: 0xe74c3c,
                    title: "**–ü—Ä–∞–≤–∏–ª–∞ –≥–∏–ª—å–¥–∏–∏ –®–µ—Å—Ç–æ–π –î–æ–º**",
                    description: "–í –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏ **\"–®–µ—Å—Ç–æ–π –î–æ–º\"**.\n\n–î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ - –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –≤ —Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ —Å–Ω–∏–∑—É.",
                    fields: [
                        { name: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ:", value: "0", inline: true },
                        { name: "–õ—é–±–∏—Ç –ø–æ—á–∏—Ç–∞—Ç—å:", value: "–¢—ã!", inline: true }
                    ]
                }
    
                const select = new StringSelectMenuBuilder().setCustomId("rulesSelect").setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª").addOptions(
                    new StringSelectMenuOptionBuilder().setLabel("–û–±—â–∏–µ –º–æ–º–µ–Ω—Ç—ã").setValue("general").setDescription("–û–±—â–∏–µ –º–æ–º–µ–Ω—Ç—ã –≥–∏–ª—å–¥–∏–∏").setEmoji("1340614498448441448"),
                    new StringSelectMenuOptionBuilder().setLabel("–ü—Ä–∞–≤–∏–ª–∞").setValue("rules").setDescription("–ü—Ä–∞–≤–∏–ª–∞ –≥–∏–ª—å–¥–∏–∏").setEmoji("1340614672696741950"),
                    new StringSelectMenuOptionBuilder().setLabel("–ó–≤–∞–Ω–∏—è").setValue("roles").setDescription("–ó–≤–∞–Ω–∏—è –≤ –≥–∏–ª—å–¥–∏–∏").setEmoji("1340614857195520100"),
                    new StringSelectMenuOptionBuilder().setLabel("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å").setValue("activity").setDescription("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–∏–ª—å–¥–∏–∏ –ø–æ —Ä–µ–π–¥–∞–º").setEmoji("1340615275686526997"),
                    new StringSelectMenuOptionBuilder().setLabel("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—Ç–∞").setValue("loot").setDescription("–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—Ç–∞").setEmoji("1340615395379515462"),
                    new StringSelectMenuOptionBuilder().setLabel("–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ï–ü").setValue("ep").setDescription("–ó–∞ —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ï–ü").setEmoji("1340615949619040308"),
                    new StringSelectMenuOptionBuilder().setLabel("–®—Ç—Ä–∞—Ñ—ã").setValue("strafs").setDescription("–ó–∞ —á—Ç–æ –¥–∞—é—Ç —à—Ç—Ä–∞—Ñ—ã").setEmoji("1340615957177040896"),
                    new StringSelectMenuOptionBuilder().setLabel("–†–∞–∑—Ä–æ–ª–ª –≤–µ—â–µ–π").setValue("roll").setDescription("–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–æ–ª–ª–∞ –≤–µ—â–µ–π —á–µ—Ä–µ–∑ –∞—É–∫—Ü–∏–æ–Ω(—É—Å–ª–æ–≤–∏—è)").setEmoji("1340616122629750854")
                )
    
                const row = new ActionRowBuilder().addComponents(select);

                if (err) {
                    console.error('Error reading file:', err);
                    return;
                }

                const jsonData = JSON.parse(data);
                jsonData.users ||= {};

                if (!jsonData.interactions) {
                    jsonData.interactions = 0;
                }

                let topUser = { id: null, interactions: 0 };
                for (const [id, userData] of Object.entries(jsonData.users)) {
                    if (userData.interactions > topUser.interactions) {
                        topUser = { id, interactions: userData.interactions };
                    }
                }

                fs.writeFile(readedRulesPath, JSON.stringify(jsonData, null, 2), 'utf8', (err) => {
                    if (err) {
                        console.error('Error writing file:', err);
                    }
                });

                embedInfo.fields[0].value = (jsonData.interactions || 0) + 1;
                if (topUser.id) {
                    embedInfo.fields = embedInfo.fields.map(field => {
                        if (field.name === "–õ—é–±–∏—Ç –ø–æ—á–∏—Ç–∞—Ç—å:") {
                            field.value = `<@${topUser.id}> (${topUser.interactions} —Ä–∞–∑)`;
                        }
                        return field;
                    });
                }

                await message.channel.send({ 
                    content: "", 
                    embeds: [embedInfo],
                    components: [row]
                });
            });

        }

        if (message.content === "")
        if (message.channel.id === guildConfig.requestChannel) {
            if (message.member.roles.cache.has(guildConfig.roleId)) return message.delete();
            const nickname = extractNickname(message.content);
            const embedInfo = {
                color: 0xe74c3c,
                title: `**–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏:**`,
                description: `\`\`\`${message.content}\`\`\``,
                fields: [{ name: "–ü—Ä–æ—Ñ–∏–ª—å:", value: `[${nickname}](https://sirus.su/base/character/x1/${nickname}/)` }],
                timestamp: new Date().toISOString(),
                author: { name: message.author.username, icon_url: message.author.displayAvatarURL(), url: message.author.displayAvatarURL() }
            };
            const buttons = new ActionRowBuilder().addComponents(
                new ButtonBuilder().setCustomId(`acceptRole_${message.author.id}`).setEmoji({ name: "‚úÖ" }).setStyle(ButtonStyle.Success),
                new ButtonBuilder().setCustomId(`declineRole_${message.author.id}`).setEmoji({ name: "‚ùé" }).setStyle(ButtonStyle.Danger),
                new ButtonBuilder().setCustomId(`delete_${message.author.id}`).setEmoji({ name: "üóëÔ∏è" }).setStyle(ButtonStyle.Secondary)
            );
            await message.delete(1);
            await message.channel.send({ content: "", embeds: [embedInfo], components: [buttons] });
        }
    }
};